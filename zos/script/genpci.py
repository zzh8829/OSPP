import re

cheader = """
/*
*	PCI ID C/C++ Header generated by Zihao Zhang
*	All the inforamtion comes from
*	http://pci-ids.ucw.cz/v2.2/pci.ids
*	Only inlcude this header in single source file
*/
"""
cinclude = """
#include <stdint.h>
"""

cstruct = """
typedef struct
{
	uint16_t vendor_id;
	char* vendor_name;
} PCI_vendor_info_t;

typedef struct
{
	uint16_t vendor_id;
	uint16_t device_id;
	char* device_name;
	uint16_t sub_vendor_id;
	uint16_t sub_device_id;
	char* sub_system_name;
} PCI_device_info_t;

typedef struct
{
	uint8_t class_id;
	char* class_name;
} PCI_class_info_t;

typedef struct
{
	uint8_t class_id;
	uint8_t subclass_id;
	char* subclass_name;
	uint8_t prog_if_id; // Programming Interface
	char* prog_if_name;
} PCI_subclass_info_t;
"""

cdevbeg = """
PCI_device_info_t PCI_device_info_table[] = 
{
"""

cdevend = """
};

#define PCI_DEVICE_INFO_TABLE_LEN (sizeof(PCI_device_info_table)/sizeof(PCI_device_info_t))
"""

cvenbeg = """
PCI_vendor_info_t PCI_vendor_info_table[] = 
{
"""

cvenend = """
};

#define PCI_VENDOR_INFO_TABLE_LEN (sizeof(PCI_vendor_info_table)/sizeof(PCI_vendor_info_t))
""" 

cclsbeg = """
PCI_class_info_t PCI_class_info_table[] =
{
"""

cclsend = """
};

#define PCI_CLASS_INFO_TABLE_LEN (sizeof(PCI_class_info_table)/sizeof(PCI_class_info_t))
"""

csubbeg = """
PCI_subclass_info_t PCI_subclass_info_table[] = 
{
"""

csubend = """
};

#define PCI_SUBCLASS_INFO_TABLE_LEN (sizeof(PCI_subclass_info_table)/sizeof(PCI_subclass_info_t))
"""

def escape(s):
	for c in "'\"":
		s = s.replace(c,'\\'+c)
	return s

def tabjoin(l):
	ret = ""
	for s in l:
		ret += '\t'+s+'\n'
	return ret

def dump_pci_ids(idfile,cfile):
	lines = open(idfile,'r').readlines()
	ln = 0

	cdevs = []
	cvens = []

	vendor_id = 0
	vendor_name = ""
	device_id = 0
	device_name = ""
	sub_vendor_id = 0
	sub_device_id = 0
	sub_system_name = ""

	while True:
		line = lines[ln]
		ln+=1
		if line.startswith('\t\t'):
			sub_vendor_id = int(line[2:6],16)
			sub_device_id = int(line[7:11],16)
			sub_system_name = escape(line[13:-1])
			cdevs.append('{ 0x%04x, 0x%04x, "%s", 0x%04x, 0x%04x, "%s"},'%
				(vendor_id,device_id,device_name,
				sub_vendor_id,sub_device_id,sub_system_name))

		elif line.startswith('\t'):
			device_id = int(line[1:5],16)
			device_name = escape(line[7:-1])
			cdevs.append('{ 0x%04x, 0x%04x, "%s", 0x0000, 0x0000, ""},'%
				(vendor_id,device_id,device_name))

		elif line.startswith('#'):
			continue
		elif len(line)<2:
			continue
		else :
			vendor_id = int(line[:4],16)
			vendor_name = escape(line[6:-1])
			cvens.append('{ 0x%04x, "%s"},'%(vendor_id,vendor_name))
			if vendor_id == 0xFFFF:
				break

	cclss = []
	csubs = []

	class_id = 0
	class_name = ""
	subclass_id = 0
	subclass_name = ""
	prog_if_id = 0
	prog_if_name = ""

	while True:
		line = lines[ln]
		ln+=1
		if line.startswith('\t\t'):
			prog_if_id = int(line[2:4],16)
			prog_if_name = escape(line[6:-1])
			csubs.append('{ 0x%02x, 0x%02x, "%s", 0x%02x, "%s"},'%
				(class_id,subclass_id,subclass_name,
				prog_if_id,prog_if_name))

		elif line.startswith('\t'):
			subclass_id = int(line[1:3],16)
			subclass_name = escape(line[5:-1])
			csubs.append('{ 0x%02x, 0x%02x, "%s", 0x00, ""},'%
				(class_id,subclass_id,subclass_name))

		elif line.startswith('#'):
			continue
		elif len(line)<2:
			continue
		else :
			class_id = int(line[2:4],16)
			class_name = escape(line[6:-1])
			cclss.append('{ 0x%02x, "%s"},'%(class_id,class_name))
			if class_id == 0xFF:
				break

	header = open(cfile,'w')
	header.write(cheader)
	header.write(cinclude)
	header.write(cstruct)

	header.write(cvenbeg)
	header.write(tabjoin(cvens))
	header.write(cvenend)

	header.write(cdevbeg)
	header.write(tabjoin(cdevs))
	header.write(cdevend)

	header.write(cclsbeg)
	header.write(tabjoin(cclss))
	header.write(cclsend)

	header.write(csubbeg)
	header.write(tabjoin(csubs))
	header.write(csubend)

	header.close()		

if __name__ == '__main__':
	dump_pci_ids("pci.ids","pciids.h")
